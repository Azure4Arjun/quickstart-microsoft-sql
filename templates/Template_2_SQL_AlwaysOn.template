{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "(0004) - This template creates and installs a Windows Server 2012 based application server for testing purposes into a subnet inside a VPC. **WARNING** This template creates Amazon EC2 Windows instance and related resources. You will be billed for the AWS resources used if you create a stack from this template.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "KeyPairName",
                        "PrivateSubnet",
                        "VPC"
                    ]
                },
                {
                    "Label": {
                        "default": "Windows Server 2012 based Application Server configuration"
                    },
                    "Parameters": [
                        "AppServerInstanceType",
                        "AppServerNetBIOSName",
                        "ADServer1NetBIOSName"
                    ]
                },
                {
                    "Label": {
                        "default": "Microsoft Active Directory Configuration"
                    },
                    "Parameters": [
                        "ADServer1PrivateIp",
                        "ADServer2PrivateIp",
                        "DomainDNSName",
                        "DomainMemberSGID",
                        "DomainNetBIOSName",
                        "RestoreModePassword",
                        "DomainAdminUser",
                        "DomainAdminPassword"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Quick Start Configuration"
                    },
                    "Parameters": [
                        "QSS3BucketName",
                        "QSS3KeyPrefix"
                    ]
                }
            ],
            "ParameterLabels": {
                "KeyPairName": {
                    "default": "Key Pair Name"
                },
                "ADServer1PrivateIp": {
                    "default": "Domain Controller 1 Private IP Address"
                },
                "ADServer2PrivateIp": {
                    "default": "Domain Controller 2 Private IP Address"
                },
                "ADServer2NetBIOSName": {
                    "default": "Domain Controller 2 NetBIOS Name"
                },
                "AppServerInstanceType": {
                    "default": "Application Server Instance Type"
                },
                "AppServerNetBIOSName": {
                    "default": "Application Server NetBIOS Name"
                },
                "DomainAdminPassword": {
                    "default": "Domain Admin Password"
                },
                "DomainAdminUser": {
                    "default": "Domain Admin User Name"
                },
                "DomainDNSName": {
                    "default": "Domain DNS Name"
                },
                "DomainMemberSGID": {
                    "default": "Domain Member SGID"
                },
                "DomainNetBIOSName": {
                    "default": "Domain NetBIOS Name"
                },
                "QSS3BucketName": {
                    "default": "Quick Start S3 Bucket Name"
                },
                "QSS3KeyPrefix": {
                    "default": "Quick Start S3 Key Prefix"
                },
                "PrivateSubnet": {
                    "default": "Private Subnet ID"
                },
                "VPC": {
                    "default": "ID of the VPC (e.g., vpc-0343606e)"
                }
            }
        }
    },
    "Parameters": {
        "ADServer1PrivateIp": {
            "Description": "Fixed private IP for the first Active Directory server located in AZ1",
            "Type": "String",
            "Default": "10.0.0.10"
        },
        "ADServer2PrivateIp": {
            "Description": "Fixed private IP for the second Active Directory serverr located in AZ2",
            "Type": "String",
            "Default": "10.0.64.10"
        },
        "AppServerInstanceType": {
            "Description": "Amazon EC2 instance type for the 1st WSFC Node",
            "Type": "String",
            "Default": "m3.xlarge",
            "AllowedValues": [
                "m1.large",
                "m3.xlarge",
                "m2.4xlarge"
            ],
            "ConstraintDescription": "Only EBS Optimized instance types m1.large, m3.xlarge, m2.4xlarge allowed"
        },
        "AppServerNetBIOSName": {
            "Description": "NetBIOS name of the 1st WSFC Node (up to 15 characters)",
            "Type": "String",
            "Default": "SQLClient",
            "MinLength": "1",
            "MaxLength": "15",
            "AllowedPattern": "[a-zA-Z0-9\\-]+"
        },
        "DomainAdminUser": {
            "Description": "User name for an existing domain admin account in Active Directory.",
            "Type": "String",
            "Default": "StackAdmin",
            "MinLength": "5",
            "MaxLength": "25",
            "AllowedPattern": "[a-zA-Z0-9]*"
        },
        "DomainAdminPassword": {
            "Description": "Password for the domain admin user.",
            "Type": "String",
            "MinLength": "8",
            "MaxLength": "32",
            "NoEcho": "true"
        },
        "DomainDNSName": {
            "Description": "Fully qualified domain name (FQDN) of the forest root domain e.g. example.com",
            "Type": "String",
            "Default": "example.com",
            "MinLength": "2",
            "MaxLength": "255",
            "AllowedPattern": "[a-zA-Z0-9\\-]+\\..+"
        },
        "DomainNetBIOSName": {
            "Description": "NetBIOS name of the domain (upto 15 characters) for users of earlier versions of Windows e.g. CORP",
            "Type": "String",
            "Default": "example",
            "MinLength": "1",
            "MaxLength": "15",
            "AllowedPattern": "[a-zA-Z0-9\\-]+"
        },
        "DomainMemberSGID": {
            "Description": "ID of the Domain Member Security Group (e.g., sg-7f16e910)",
            "Type": "List<AWS::EC2::SecurityGroup::Id>"
        },
        "KeyPairName": {
            "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "quickstart-reference",
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "microsoft/sql/latest/",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Type": "String"
        },
        "PrivateSubnet": {
            "Description": "ID of the Subnet you want to provision the App Server into (e.g., subnet-a0246dcd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "VPC": {
            "Description": "ID of the VPC (e.g., vpc-0343606e)",
            "Type": "AWS::EC2::VPC::Id"
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "WS2012R2": "Windows_Server-2012-R2_RTM-English-64Bit-Base-2018.01.12"
            },
            "ap-northeast-1": {
                "WS2012R2": "ami-1a7ee47c"
            },
            "ap-northeast-2": {
                "WS2012R2": "ami-0b4eee65"
            },
            "ap-south-1": {
                "WS2012R2": "ami-c488dfab"
            },
            "ap-southeast-1": {
                "WS2012R2": "ami-c83944b4"
            },
            "ap-southeast-2": {
                "WS2012R2": "ami-30a55952"
            },
            "eu-central-1": {
                "WS2012R2": "ami-3204995d"
            },
            "eu-west-1": {
                "WS2012R2": "ami-cc821eb5"
            },
            "sa-east-1": {
                "WS2012R2": "ami-d6c785ba"
            },
            "us-east-1": {
                "WS2012R2": "ami-013e197b"
            },
            "us-east-2": {
                "WS2012R2": "ami-02446e67"
            },
            "us-west-1": {
                "WS2012R2": "ami-92fefdf2"
            },
            "us-west-2": {
                "WS2012R2": "ami-afe051d7"
            }
        }
    },
    "Resources": {
        "AppServerWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "AppServer",
            "Properties": {
                "Handle": {
                    "Ref": "AppServerWaitHandle"
                },
                "Timeout": "3500"
            }
        },
        "AppServerWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "AppServerRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": [
                                            "arn:${Partition}:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*",
                                            {
                                                "Partition": {
                                                    "Fn::If": [
                                                        "GovCloudCondition",
                                                        "aws-us-gov",
                                                        "aws"
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "Effect": "Allow"
                                }
                            ]
                        },
                        "PolicyName": "aws-quick-start-s3-policy"
                    }
                ],
                "Path": "/",
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Effect": "Allow"
                        }
                    ],
                    "Version": "2012-10-17"
                }
            }
        },
        "AppServerProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "AppServerRole"
                    }
                ],
                "Path": "/"
            }
        },
        "AppServer": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Authentication": {
                    "S3AccessCreds": {
                        "type": "S3",
                        "roleName": {
                            "Ref": "AppServerRole"
                        },
                        "buckets": [
                            {
                                "Ref": "QSS3BucketName"
                            }
                        ]
                    }
                },
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "config": [
                            "CFNsetup",
                            "renameandjoin",
                            "finalize"
                        ]
                    },
                    "CFNsetup": {
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.AppServer.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -s ",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            " -r AppServer",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "renameandjoin": {
                        "files": {
                            "C:\\cfn\\scripts\\RenameComputer.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "param ($name)",
                                            "\n",
                                            "Rename-Computer $name",
                                            "\n",
                                            "Restart-Computer"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\scripts\\JoinComputer.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$admin_pwd = convertto-securestring ",
                                            {
                                                "Ref": "DomainAdminPassword"
                                            },
                                            " -asplaintext -force ",
                                            "\n",
                                            "$admincreds = New-Object System.Management.Automation.PSCredential (\"",
                                            {
                                                "Ref": "DomainNetBIOSName"
                                            },
                                            "\\",
                                            {
                                                "Ref": "DomainAdminUser"
                                            },
                                            "\"",
                                            ",$admin_pwd)",
                                            "\n",
                                            "Set-DnsClientServerAddress -InterfaceAlias \"Ethernet\" -ServerAddresses (\"",
                                            {
                                                "Ref": "ADServer1PrivateIp"
                                            },
                                            "\",\"",
                                            {
                                                "Ref": "ADServer2PrivateIp"
                                            },
                                            "\")",
                                            "\n",
                                            "Add-Computer -Credential $admincreds -DomainName ",
                                            {
                                                "Ref": "DomainDNSName"
                                            },
                                            "\n",
                                            "Restart-Computer",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "1-execute-powershell-script-RenameComputer": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe ",
                                            "-ExecutionPolicy",
                                            " RemoteSigned",
                                            " C:\\cfn\\scripts\\RenameComputer.ps1 ",
                                            {
                                                "Ref": "AppServerNetBIOSName"
                                            }
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "forever"
                            },
                            "2-execute-powershell-script-JoinComputer": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe ",
                                            "-ExecutionPolicy",
                                            " RemoteSigned",
                                            " C:\\cfn\\scripts\\JoinComputer.ps1"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "forever"
                            }
                        }
                    },
                    "finalize": {
                        "files": {
                            "C:\\cfn\\scripts\\DownloadBlasterApp.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$zipfilename = \"C:\\cfn\\scripts\\SQLBlaster_Demo.zip\"",
                                            "\n",
                                            "$destination = \"C:\\Users\\Default\\Desktop\"",
                                            "\n",
                                            "import-module BitsTransfer ",
                                            "\n",
                                            "Start-BitsTransfer ",
                                            "-Source https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/SQLBlaster_Demo.zip -Destination \"$zipfilename\"",
                                            "\n",
                                            "if(test-path($zipfilename))",
                                            "\n",
                                            "{",
                                            "\n",
                                            "[Reflection.Assembly]::LoadWithPartialName( \"System.IO.Compression.FileSystem\" )",
                                            "\n",
                                            "[System.IO.Compression.ZipFile]::ExtractToDirectory($zipfilename, $destination)",
                                            "\n",
                                            "}",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\scripts\\AddUserToGroup.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "Param(",
                                            "\n",
                                            "[Parameter(Mandatory=$True)]",
                                            "\n",
                                            "[string]$ServerName,",
                                            "\n",
                                            "[Parameter(Mandatory=$True)]",
                                            "\n",
                                            "[string]$GroupName,",
                                            "\n",
                                            "[Parameter(Mandatory=$True)]",
                                            "\n",
                                            "[string]$DomainNetBIOSName,",
                                            "\n",
                                            "[Parameter(Mandatory=$True)]",
                                            "\n",
                                            "[string]$UserName",
                                            "\n",
                                            ")",
                                            "$de = [ADSI]\"WinNT://$ServerName/$GroupName,group\"",
                                            "\n",
                                            "$de.psbase.Invoke(\"Add\",([ADSI]\"WinNT://$DomainNetBIOSName/$UserName\").path)",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "1-execute-powershell-script-DownloadBlasterApp": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe ",
                                            "-ExecutionPolicy",
                                            " RemoteSigned",
                                            " C:\\cfn\\scripts\\DownloadBlasterApp.ps1"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "2-execute-powershell-script-AddUserToGroup": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe ",
                                            "-ExecutionPolicy",
                                            " RemoteSigned",
                                            " C:\\cfn\\scripts\\AddUserToGroup.ps1 -UserName ",
                                            {
                                                "Ref": "DomainAdminUser"
                                            },
                                            " -ServerName ",
                                            {
                                                "Ref": "AppServerNetBIOSName"
                                            },
                                            " -DomainNetBIOSName ",
                                            {
                                                "Ref": "DomainNetBIOSName"
                                            },
                                            " -GroupName \"Administrators\"",
                                            "\n"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "3-signal-success": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "cfn-signal.exe -e 0 \"",
                                            {
                                                "Ref": "AppServerWaitHandle"
                                            },
                                            "\""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "WS2012R2"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "AppServerProfile"
                },
                "InstanceType": {
                    "Ref": "AppServerInstanceType"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet"
                },
                "EbsOptimized": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AppServerNetBIOSName"
                        }
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": "100",
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "SecurityGroupIds": [
                    {
                        "Ref": "DomainMemberSGID"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r AppServer ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>"
                            ]
                        ]
                    }
                }
            }
        }
    },
    "Outputs": {
        "DomainAdmin": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Ref": "DomainNetBIOSName"
                        },
                        "\\",
                        {
                            "Ref": "DomainAdminUser"
                        }
                    ]
                ]
            },
            "Description": "Domain administrator account"
        },
        "LocalAdmin": {
            "Value": "Administrator",
            "Description": "Please retrieve Administrator password of the instance"
        },
        "AppServerNetBIOSName": {
            "Value": {
                "Ref": "AppServerNetBIOSName"
            },
            "Description": "NetBIOS name of the App Server"
        }
    }
}